// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Association{
  id Int @id @unique @default(autoincrement())
  nom String @unique
  description String
  // Relation fields
  notifications Notification[]
  programme Programme? @relation(references: [nom], fields: [programme_label])
  programme_label String?
  succursales Succursale[]
  cotisations Cotisation[]
  utilisateurs Utilisateur[]
}

model Cotisation{
  id Int @id @unique @default(autoincrement())
  label String @unique
  montant Float
  devise String
  date_creation DateTime @default(now())
  isActive Boolean
  // Relation fields
  association Association @relation(references: [nom], fields: [association_label])
  association_label String
  type_cotisation Type_Cotisation @relation(references: [label], fields: [type_cotisation_label])
  type_cotisation_label String
  paiements Paiement[]

  Periode Periode[]
}

model Vehicule{
  id Int @id @unique @default(autoincrement())
  marque String
  modele String
  immatriculation String
  // Relation fields
  proprietaire Utilisateur @relation(references: [id], fields: [utilisateur_id])
  utilisateur_id String

}


model Notification{
  id Int @id @unique @default(autoincrement())
  titre String
  message String
  date_creation DateTime @default(now())
  date_envoi DateTime?
  // Relation fields
  association Association @relation(references: [nom], fields: [association_label])
  association_label String

}


model Paiement{
  id Int @id @unique @default(autoincrement())
  reference String
  devise String 
  montant Float
  status  PaymentStatus   @default(PENDING)
  created_at DateTime @default(now())
  //Relation fields
  cotisation Cotisation @relation(references: [label], fields: [cotisation_label])
  cotisation_label String
  utilisateur Utilisateur @relation(references: [id], fields: [utilisateur_id])
  utilisateur_id String

  periode_id Int
  periode    Periode @relation(fields: [periode_id], references: [id])
  association_label  String?            
}

model Periode{
  id Int @unique @default(autoincrement())
  label String
  //doit etre en lien avec cotisation
  cotisation Cotisation @relation(fields: [id_cotisation], references: [id])
  id_cotisation Int

  Paiement Paiement[]
}


model Permission{
  id Int @id @unique @default(autoincrement())
  label String
  description String?
  // Relation fields
  profils_utilisateurs Profil_Utilisateur[]
}

model Profil_Utilisateur{
  id Int @id @unique @default(autoincrement())
  label String @unique
  // Relation fields
  utilisateur Utilisateur[]

  permissions Permission[]
}

model Programme{
  id Int @id @unique @default(autoincrement())
  nom String @unique
  portee String
  telephone String
  email String
  // Relation fields
  associations Association[]
}

model Succursale{
  id Int @id @unique @default(autoincrement())
  nom String
  association Association @relation(references: [id], fields: [association_id])
  association_id Int
}

model Type_Cotisation{
  id Int @id @unique @default(autoincrement())
  label String @unique
  //Relation fields
  cotisations Cotisation[]
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}



model Utilisateur {
  id          String    @id @default(uuid())
  
  firstname  String
  lastname   String
  gender     String  // "H" or "F"
  phone1     String
  phone2     String?
  type        Int? // Identification du type (Admin = 1)

  street     String
  city       String
  postalCode String
  country    String
  state      String

  merchantCode String? @unique  // Exclure `merchantCode` si `Utilisateur.personalInfos.type = 1`
  username     String  @unique
  password     String

  // Biometrics Information
  biometrics BiometricData?
  
    // Relation fields
  associationRef Association? @relation(references: [nom], fields: [association])
  association String?
  profil Profil_Utilisateur? @relation(references: [label], fields: [profil_label])
  profil_label String?
  paiements Paiement[]
  vehicule Vehicule[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model BiometricData {
  id          Int         @id @default(autoincrement())
  user      Utilisateur @relation(fields: [userId], references: [id])
  userId    String @unique

  faceData  FaceData?
  fingers   FingerData[]?
}

model FaceData {
  id           Int        @id @default(autoincrement())
  biometricId  Int        @unique
  biometrics    BiometricData  @relation(fields: [biometricId], references: [id])
  pos          String     // E.g., "UP", "FRONT"
  data         Bytes     // Base64-encoded face data
}

model FingerData {
  id           Int        @id @default(autoincrement())
  biometricId  Int
  biometrics    BiometricData  @relation(fields: [biometricId], references: [id])
  pos          Int        // Finger position (e.g., 1 for thumb, 2 for index)
  data         Bytes     // Base64-encoded fingerprint data
}



